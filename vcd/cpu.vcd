$date
	Mon Apr 29 22:43:27 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module evaluator $end
$scope module cpu_inst $end
$var wire 1 ! clk $end
$var wire 64 " in_data [63:0] $end
$var wire 1 # reset $end
$var wire 1 $ rw_error $end
$var wire 64 % rw_data_out [63:0] $end
$var wire 1 & r_error $end
$var wire 32 ' r_data_out [31:0] $end
$var reg 1 ( alu_ready $end
$var reg 64 ) ans [63:0] $end
$var reg 1 * decode_ready $end
$var reg 1 + error $end
$var reg 1 , fetch_ready $end
$var reg 1 - halt $end
$var reg 64 . imm [63:0] $end
$var reg 1 / in_signal $end
$var reg 5 0 opcode [4:0] $end
$var reg 64 1 out_data [63:0] $end
$var reg 1 2 out_signal $end
$var reg 64 3 pc [63:0] $end
$var reg 64 4 r_addr [63:0] $end
$var reg 5 5 rd_num [4:0] $end
$var reg 64 6 rd_val [63:0] $end
$var reg 1 7 read_or_write $end
$var reg 1 8 read_write_ready $end
$var reg 5 9 rs_num [4:0] $end
$var reg 64 : rs_val [63:0] $end
$var reg 5 ; rt_num [4:0] $end
$var reg 64 < rt_val [63:0] $end
$var reg 64 = rw_addr [63:0] $end
$var reg 64 > rw_data_in [63:0] $end
$var reg 1 ? rw_write_en $end
$var reg 2 @ state [1:0] $end
$scope module memory $end
$var wire 1 ! clk $end
$var wire 64 A r_addr [63:0] $end
$var wire 1 & r_error $end
$var wire 1 # reset $end
$var wire 64 B rw_addr [63:0] $end
$var wire 64 C rw_data_in [63:0] $end
$var wire 1 $ rw_error $end
$var wire 1 ? rw_write_en $end
$var wire 64 D rw_data_out [63:0] $end
$var wire 32 E r_data_out [31:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 F i [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 G i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 G
b0 F
bx E
bx D
bx C
bx B
bx A
bx @
x?
bx >
bx =
bx <
bx ;
bx :
bx 9
x8
x7
bx 6
bx 5
bx 4
bx 3
x2
bx 1
bx 0
x/
bx .
x-
x,
x+
x*
bx )
x(
bx '
x&
bx %
x$
x#
bx "
0!
$end
#5
1!
#10
0+
02
0/
0-
0?
18
0(
0*
0,
b0 @
b0 3
b10000000000000000000 F
b11111 G
0!
1#
#15
0&
b1 @
1,
b0 '
b0 E
b0 4
b0 A
08
b10000000000000000000 F
1!
#20
0!
b1000010000000000000000000101 '
b1000010000000000000000000101 E
0#
#25
b11 @
07
1*
b101 .
b0 ;
b0 9
b1 5
b1 0
0,
1!
#30
0!
#35
b10 @
18
0*
b0 <
b0 :
b0 6
1!
#40
0!
#45
b11 @
17
1(
b100 3
b101 )
08
1!
#50
0!
#55
b0 @
18
0(
1!
#60
0!
#65
b1 @
1,
b101000100000100000000000000000 '
b101000100000100000000000000000 E
b100 4
b100 A
08
1!
#70
0!
#75
b11 @
07
1*
b0 .
b1 9
b10 5
b101 0
0,
1!
#80
0!
#85
b10 @
18
0*
b101 :
1!
#90
0!
#95
b11 @
17
1(
1-
1+
b0 )
08
1!
#100
0!
